# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14fyXZYSrofAo2xQAa1suuwmOhJLPmTdR

**Exercise 1:
Find a vector w that bisects the smaller of two angels formed by 4i + 3j and 40i - 9j**

**Solution:**
"""

import math

u = [4, 3]
v = [40, -9]

# --- Step 1: Norm function ---
def norm(a):
    """Compute Euclidean norm of vector a"""
    norm_vector=(a[0]**2 +a[1]**2)**0.5
    return norm_vector
    pass

u_norm = norm(u)
v_norm = norm(v)

# --- Step 2: Find equation for y given x=1 ---
# Equation: (u·w)/‖u‖ = (v·w)/‖v‖  because cos(k)=cos(z), just bcs w bisects
# => (4*x + 3*y)/‖u‖ = (40*x - 9*y)/‖v‖
x = 1
# TODO: compute y from the equation
y = ((40*x)/v_norm - (4*x)/u_norm) / (3/u_norm + 9/v_norm)
w = [x, y]

# --- Step 3: Normalize result ---
n=norm(w)
w_norm = [w[0]/n,w[1]/n]

print("Bisector vector w:", w_norm)

"""**Exercise 2: find all vectors orthogonal to v=[1,1,-1]**

**Solution:**
"""

x2_values = [1, 2, -1]  # example
x3_values = [0, 1, 2]   # example

vectors = []

for i in range(len(x2_values)):
    x2 = x2_values[i]
    x3 = x3_values[i]

    part1 = [-x2, x2, 0]  # x2 * [-1,1,0]
    part2 = [x3, 0, x3]   # x3 * [1,0,1]

    vec = [part1[j] + part2[j] for j in range(3)]
    vectors.append(vec)

for i, v in enumerate(vectors, 1):
    print(f"Ortogonal vektor {i}: {v}")

"""**Notes:**

1. Matrices can only be multiplied if their "neighbouring" dimensions match.
2. Matrix multiplication is not commutative.
3. Matrix multiplication != element-wise operation(it is called Hadamard product)
"""